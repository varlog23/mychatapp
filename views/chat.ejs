<style>
.list-group {
    overflow-y: auto;
    scrollbar-width: none; /* Firefox */
    -ms-overflow-style: none;  /* IE 10+ */
}
.list-group::-webkit-scrollbar { /* WebKit */
    width: 0px;
}
</style>
<div class="row">
    <div class="col-md-3">
    </div>
    <div class="col-md-4 text-right">
        <h2>MYUCHAT</h2>
    </div>
    <div class="col-md-4 text-right">
        <a href="/users/logout" class="btn btn-secondary" type="submit">Logout</a>
    </div>
</div>
<div class="row">
    <div class="col-md-3 my-2">
        <div class="card card-body bg-light" style="max-height: 80vh; overflow-y: auto;">
            <h2>Online Users</h2>
            <ul id="users" class="list-group"></ul>
        </div>
    </div>
    <div class="col-md-8 my-2">
        <div id="chat" class="list-group" style="height: 50vh; overflow-y: auto;"></div>
        <form id="messageForm" class="my-2">
            <div class="form-group" style="height:170px;">
                <div id="messagearea" style="height:130px;">
                    <label for="message" class="form-group  my-2">Enter message</label>
                    <textarea class="form-control" id="message" rows="3"></textarea>
                </div>
                <div id="camarea" style="display:none;">
                    <% include vidindex %>
                </div>
                <input class="btn btn-primary my-2" type="submit" value="Send"/><span id="status" class="text-success mx-2"></span>               
            </div> 
            <div class="custom-control custom-switch">
                <input type="checkbox" class="custom-control-input" id="camToggler"/>
                <label class="custom-control-label" for="camToggler">Toggle to record video</label>
            </div>   
        </form>             
    </div>
</div>
<script src="/socket.io/socket.io.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/socket.io-stream/0.9.1/socket.io-stream.min.js"></script>
<script>
$(function() {
        const socket = io.connect();
        const $status = $('#status');
        let $messageForm = $('#messageForm');
        let $message = $('#message');
        let $chat = $('#chat');
        let $users = $('#users');
        const newUser = "<%= user.name %>"; 
        socket.emit("newUserToServer",newUser);
        
        // Decimal code points for Emojis
        const SAD_EMOJI = [9785, 65039];
        const HAPPY_EMOJI = [55357, 56898];
        const NEUTRAL_EMOJI = [55357, 56848];

        // Set default status
        var statusDefault = $status.text();

        // Function to set status message
        function setStatus(s){
            $status.text(s);
            if(s !== statusDefault){
                var delay = setTimeout(function(){
                    setStatus(statusDefault);
                }, 2000);
            }
        }
        
        // Function to handle sending message
        function handleSendingMessage(event){
            event.preventDefault();
            //console.log("Form submitted!");
            // If toggle is set video and if video is recorded, send video as Blob
            if ($('#camToggler').prop("checked")) {
                if(player.recordedData){
                    recordedBlob = player.recordedData
                    // Create new io.stream instance
                    let stream = ss.createStream()
                     // upload file to the server.
                    ss(socket).emit('file', stream, {size: recordedBlob.size});
                    const blobStream = ss.createBlobReadStream(recordedBlob);
                    let size = 0;
                    
                    blobStream.on('data', function(chunk) {
                        size += chunk.length;
                        //console.log(Math.floor(size / recordedBlob.size * 100) + '%');
                        setStatus('Sending '+Math.floor(size / recordedBlob.size * 100) + '%');
                    });
                    blobStream.on('end' , function() {
                        setStatus('Complete');
                    });                    
                    
                    blobStream.pipe(stream);                    
                    //socket.emit("newVideoToServer",recordedBlob); /* no longer used */
                    // Reset the player interface and recorder state.
                    player.record().reset();
                    player.recordedData = null;
                }
                else{
                    setStatus('Please record video to send');
                }                
            }
            else
            {
                const newMsg = $message.val();
                if(newMsg){
                    socket.emit("newMessageToServer",newMsg);
                    $message.val('');
                }
            }
        }
        
        // Handle form submit
        $messageForm.submit(function(event){
            handleSendingMessage(event);
        });

        // Handle enter key on textarea to submit form
        $message.keypress(function(event){
            if(event.which === 13 && event.shiftKey == false){
                handleSendingMessage(event);
            }
        });       

        // Update users list
        socket.on('usersToClients',function(data){
            let html = '';
            for(i=0;i<data.length;i++){
                //html += `<li class="list-group-item">${data[i]}</li>` /* Template literals are not supported by IE11 */
                html += "<li class=\"list-group-item\">".concat(data[i], "</li>");
            }
            $users.html(html);
        });        

        // Update message list with text
        socket.on('messageToClients',function(data){
            const mood = data.sentiment === 'positive' ? HAPPY_EMOJI : (data.sentiment === 'negative' ? SAD_EMOJI: NEUTRAL_EMOJI);
            /* Template literals are not supported by IE11 */
            //$chat.append(`<div class="list-group-item list-group-item-action flex-column align-items-start mb-1" style="max-width: 46rem;"><div class="d-flex w-100 justify-content-between"><h5 class="mb-1">${data.user}</h5><small>${String.fromCharCode(mood[0], mood[1])}</small></div><p class="mb-1">${data.msg}</p></div>`);
            $chat.append("<div class=\"list-group-item list-group-item-action flex-column align-items-start mb-1\" style=\"max-width: 46rem;\"><div class=\"d-flex w-100 justify-content-between\"><h5 class=\"mb-1\">".concat(data.user, "</h5><small>").concat(String.fromCharCode(mood[0], mood[1]), "</small></div><p class=\"mb-1\">").concat(data.msg, "</p></div>"));
            $chat.scrollTop($chat[0].scrollHeight);
        });

        // Update message list with video
        socket.on('videoToClients',function(data){
            const blobdata = new Blob([new Uint8Array(data.msg)]);
            //recording.src = URL.createObjectURL(blobdata);
            /* Template literals are not supported by IE11 */
            //$chat.append(`<div class="list-group-item list-group-item-action flex-column align-items-start mb-1" style="max-width: 46rem;"><div class="d-flex w-100 justify-content-between"><h5 class="mb-1">${data.user}</h5><small></small></div><video src=${URL.createObjectURL(blobdata)} width="160" height="120" controls></video></div>`);
            $chat.append("<div class=\"list-group-item list-group-item-action flex-column align-items-start mb-1\" style=\"max-width: 46rem;\"><div class=\"d-flex w-100 justify-content-between\"><h5 class=\"mb-1\">".concat(data.user, "</h5><small></small></div><video src=").concat(URL.createObjectURL(blobdata), " width=\"160\" height=\"120\" controls></video></div>"));
            $chat.scrollTop($chat[0].scrollHeight);
        });
        
        // Get Status From Server
        socket.on('status', function(data){
            // get message status
            setStatus(data.message);
        });

        // Toggler functionality
        $('#camToggler').change(function(){
            if ($('#camToggler').prop("checked")) {
                $("#messagearea").hide();
                $("#camarea").show();
            } else {
                $("#messagearea").show();
                $("#camarea").hide();
            }
        });
                
    })
</script>
